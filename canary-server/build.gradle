plugins {
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.13.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'org.slf4j:slf4j-api:2.0.17'

    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.13.1'

    implementation 'com.google.dagger:dagger:2.56.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.56.2'

    implementation platform('io.helidon:helidon-bom:4.2.3')
    implementation 'io.helidon.common:helidon-common-media-type'
    implementation 'io.helidon.config:helidon-config-yaml'
    implementation 'io.helidon.http.media:helidon-http-media-jackson'
    implementation 'io.helidon.webserver:helidon-webserver'
    implementation 'io.helidon.logging:helidon-logging-slf4j'
    implementation 'io.helidon.http.encoding:helidon-http-encoding-gzip'

    implementation platform('com.fasterxml.jackson:jackson-bom:2.19.1')
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    implementation platform('io.micrometer:micrometer-bom:1.15.1')
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.github.mweirauch:micrometer-jvm-extras:0.2.2'

    implementation platform('io.micrometer:micrometer-tracing-bom:1.5.1')
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation platform('io.opentelemetry:opentelemetry-bom:1.51.0')
    implementation 'io.opentelemetry:opentelemetry-sdk'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

}

test {
    useJUnitPlatform()
}

distributions {
    main {
        contents {
            rename('canary.template.yaml', 'canary.yaml')
            rename('logback.template.xml', 'logback.xml')
            rename('helidon.template.yaml', 'helidon.yaml')
        }
    }
}

runtime {
    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages'
    ]
    modules = [
        'java.xml',
        'java.naming',
        'java.management',
        'jdk.management'
    ]
}

application {
    mainClass = 'com.steatoda.canary.server.CanaryCmd'
}

processResources {
    filesMatching(["**/canary.properties"]) {
        expand version: version
    }
}

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('CLASSPATH=', 'CLASSPATH=$CANARY_CONF:$APP_HOME/conf:')
        windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%CANARY_CONF%;%APP_HOME%\\conf;')
    }
}

run {
    classpath += files("${System.env.CANARY_CONF}", "${System.properties.CANARY_CONF}")
    standardInput = System.in
}

build.dependsOn installDist

distTar.enabled = false
distZip.enabled = false
